#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>

#define MAIN  0
#define QWERT 1
#define NUM   2
#define NAV   3
#define SYMB  4
#define FUNC  5
#define MOUSE 6


&lt {
    tapping-term-ms = <240>;
    flavor = "hold-preferred";
    quick-tap-ms = <150>;
};



/ {
    combos {
        compatible = "zmk,combos";

        combo_alt {
            timeout-ms = <50>;
            bindings = <&kp LALT>;
            key-positions = <13 14>;
        };

        combo_ctrl {
            timeout-ms = <50>;
            bindings = <&kp LCTRL>;
            key-positions = <14 15>;
        };

        combo_shift {
            timeout-ms = <50>;
            bindings = <&kp LSHFT>;
            key-positions = <15 16>;
        };

        combo_lck {
            timeout-ms = <50>;
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        combo_DGSK {
            timeout-ms = <50>;
            bindings = <&mo MOUSE>;
            key-positions = <20 21>;
        };

        combo_rck {
            timeout-ms = <50>;
            bindings = <&mkp RCLK>;
            key-positions = <21 22>;
        };

        combo_change {
            timeout-ms = <100>;
            bindings = <&lan_chan>;
            key-positions = <25 26>;
        };


    };
};




/ {

    macros {

// language change and layer change at the same time
        lan_chan: lan_chan {
            compatible = "zmk,behavior-macro";
            label = "ZM_lan_chan";
            #binding-cells = <0>;
            bindings 
                = <&macro_press &tog QWERT>
                , <&macro_tap &kp RALT>
                , <&macro_release &tog QWERT>
                ;
        };

// automatically write two parentheses
        auto_par: auto_par {
            compatible = "zmk,behavior-macro";
            label = "ZM_auto_par";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>
                ;
        };

// automatically write two brackets
        auto_bkt: auto_bkt {
            compatible = "zmk,behavior-macro";
            label = "ZM_auto_bkt";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>
                ;
        };

// automatically write two chevrons
        auto_chv: auto_chv {
            compatible = "zmk,behavior-macro";
            label = "ZM_auto_chv";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LT &kp GT &kp LEFT>
                ;
        };

// automatically write two quotations
        auto_dqt: auto_dqt {
            compatible = "zmk,behavior-macro";
            label = "ZM_auto_dqt";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp SQT &kp SQT>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp LEFT>

                ;
        };

// automatically write two small quotations
        auto_sqt: auto_sqt {
            compatible = "zmk,behavior-macro";
            label = "ZM_auto_sqt";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SQT &kp SQT &kp LEFT>
                ;
        };


//end of macro list
    };




    keymap {
        compatible = "zmk,keymap";

        Main {
            label = "Main";
            bindings = <
  &kp TAB  &kp Q  &kp W      &kp F      &kp P  &kp B           &kp J    &kp L      &kp U    &kp Y     &kp SEMI    &kp BSPC
  &kp ESC  &kp A  &kp R      &kp S      &kp T  &kp G           &kp M    &kp N      &kp E    &kp I  &kp O    &kp APOS
&kp LSHFT  &kp Z  &kp X      &kp C      &kp D  &kp V           &kp K    &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                     &kp LSHFT  &lt NUM SPACE  &lt SYMB DEL    &lt NAV BSPC  &lt FUNC RET
            >;
        };

        Qwert {
            label = "Qwert";
            bindings = <
  &kp TAB  &kp Q  &kp W      &kp E      &kp R  &kp T    &kp Y    &kp U      &kp I    &kp O     &kp P    &kp BSPC
  &kp ESC  &kp A  &kp S      &kp D      &kp F  &kp G    &kp H    &kp J      &kp K    &kp L  &kp SEMI    &kp APOS
&kp LSHFT  &kp Z  &kp X      &kp C      &kp V  &kp B    &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                             &trans    &trans  &trans   &trans   &trans
            >;
        };

        Num {
            label = "Num";
            bindings = <
  &trans   &kp LC(B) &none       &kp LC(F) &kp LC(S) &kp LS(LG(S))        &kp ASTRK  &kp N7   &kp N8  &kp N9  &kp MINUS  &kp HOME
  &trans   &sk LGUI &sk LEFT_ALT &sk LCTRL &sk LSHFT &kp LC(A)            &kp FSLH   &kp N4   &kp N5  &kp N6  &kp PLUS    &trans
&kp LEFT_ALT &kp LC(Z) &kp LC(X)  &kp LC(C) &kp LC(V) &kp LC(Y)           &kp EQUAL  &kp N1   &kp N2  &kp N3  &kp N0    &trans
                               &kp LGUI  &kp SPACE    &trans              &kp RCTRL  &kp RET
            >;
        };

        Nav {
            label = "Nav";
            bindings = <
&trans    &kp EXCL   &kp PG_UP &kp UP   &kp PG_DN  &none        &bootloader   &none   &kp RCTRL  &kp RALT  &tog QWERT    &kp DEL
&trans    &kp HOME   &kp LEFT  &kp DOWN &kp RIGHT  &kp END      &to MAIN  &sk LSHFT   &sk LCTRL  &sk LEFT_ALT &sk LGUI   &kp GRAVE
&trans    &kp GRAVE  &none     &none    &kp TAB    &none        &kp LC(Y) &kp LC(V)   &kp LC(C)   &kp LC(X)   &kp LC(Z)  &kp TILDE
                        &kp BSPC  &kp SPACE  &kp RET            &trans    &none
            >;
        };

        SYMB {
            label = "SYMB";
            bindings = <
   &none    &kp ESC  &none  &none   &none  &none                  &kp LT    &auto_chv  &kp GT   &auto_sqt &kp MINUS  &none
   &none    &sk LGUI &sk LEFT_ALT &sk LCTRL &sk LSHFT  &none      &kp LPAR  &auto_par  &kp RPAR &kp SQT   &kp SEMI   &none
   &none    &none    &none  &none   &none  &none                  &kp LBKT  &auto_bkt  &kp RBKT &auto_dqt &kp EXCL   &none
                                   &kp LSHFT  &none  &none        &trans  &trans
            >;
        };

        Func {
            label = "Func";
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12    &C_VOL_UP       &kp LC(T)  &kp LEFT         &none     &kp RIGHT     &none   &none
&trans  &kp F5  &kp F6   &kp F7   &kp F8     &C_MUTE         &kp F5     &kp LA(LEFT)     &mkp MCLK &kp LA(RIGHT) &none   &none
&trans  &kp F1  &kp F2   &kp F3   &kp F4     &C_VOL_DN       &kp LC(W)  &kp LS(LC(TAB))  &none     &kp LC(TAB)   &none   &none
                  &bt BT_PRV  &bt BT_CLR  &bt BT_NXT         &kp RGUI  &trans
            >;
        };

        Mouse {
            label = "Mouse";
            bindings = <
   &trans  &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans     &trans
   &trans  &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans     &trans
   &trans  &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans     &trans
                              &trans  &trans     &trans    &trans  &trans
            >;
        };

        Game_++ {
            label = "Game ++";
            bindings = <
 &kt F5  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp LC(RA(Y))  &kp LC(RA(U))  &kp LC(RA(I))  &kp LC(RA(H))  &kp LC(RA(J))  &kp LC(RA(DEL))
  &to 3         &kp L         &kp O         &kp Y         &kp K         &kp G           &trans         &trans         &trans         &trans         &trans       &kp LA(F4)
&kp F10         &none         &to 0         &none  &kp NUMBER_6  &kp NUMBER_7           &trans         &trans         &trans         &trans         &trans            &to 0
                                            &kp J         &kp I         &kp M           &trans         &trans
            >;
        };


    };
};
